var documenterSearchIndex = {"docs":
[{"location":"#BaseZz","page":"Home","title":"BaseZz","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BaseZz.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#BaseZz.fastextrema","page":"Home","title":"BaseZz.fastextrema","text":"fastextrema(x) -> (mini, maxi)\n\nCompute the minimum and maximum values of an input array x and return them as a tuple.\n\nx can be an array of Real numbers, Gray colorants, or multi-channel colorants Colorant{T,N}, where T is a Real type. If x is an array of AbstractFloat elements, values such as NaN, missing, Inf, or -Inf are automatically excluded from the computation. Additionally, x can be a Skip object from the Skipper.jl package, created using the skip or keep functions.\n\nExamples\n\n# Example with an array of real numbers\ndata = [1.0, 2.0, 3.0, 4.0, 5.0]\nmini, maxi = fastextrema(data)\nprintln(\"Minimum: \", mini, \", Maximum: \", maxi)\n\n# Example with a multi-channel image\nimg = rand(RGB, 10, 10) # Random RGB image\nmini, maxi = fastextrema(img)\nprintln(\"Minimum: \", mini, \", Maximum: \", maxi)\n\n# Example with an 8-bit grayscale image, ignoring all values below 0.5\nimg = rand(Gray{N0f8}, 10, 10)\nmini, maxi = skip(x -> x < 0.5, img) |> fastextrema\nprintln(\"Minimum: \", mini, \", Maximum: \", maxi)\n\nNote\n\nMicrobenchmarks indicate that fastextrema is about twice as fast as Base.extrema for floating-point numbers, but shows no significant benefit for integers. The advantage of fastextrema lies in its support for Skipper.jl. However, it is less versatile than Base.extrema as it lacks the dims argument and does not support generic iterable collections. Despite this, fastextrema remains sufficient for image processing tasks.\n\n\n\n\n\n","category":"function"}]
}
